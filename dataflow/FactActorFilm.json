{
	"name": "FactActorFilm",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "saw-uofu-is6480-dldwhndev-001-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "sourceActor"
				},
				{
					"linkedService": {
						"referenceName": "saw-uofu-is6480-dldwhndev-001-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "sourceFilm"
				},
				{
					"linkedService": {
						"referenceName": "saw-uofu-is6480-dldwhndev-001-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "sourceFilmActor"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "saw-uofu-is6480-dldwhndev-001-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "lookup1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ActorID as short,",
				"          FirstName as string,",
				"          LastName as string,",
				"          ActorKey as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'fsuofuis6480dldw001',",
				"     folderPath: 'Gold/UofU/IS6480/Instructor/RentalDB/DimActor') ~> sourceActor",
				"source(output(",
				"          FilmID as short,",
				"          Title as string,",
				"          Description as string,",
				"          Release_year as short,",
				"          LanguageID as string,",
				"          RentalDuration as short,",
				"          RentalRate as double,",
				"          Length as short,",
				"          ReplacementCost as double,",
				"          Rating as string,",
				"          LastUpdate as string,",
				"          SpecialFeatures as string,",
				"          Fulltext as string,",
				"          FilmKey as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'fsuofuis6480dldw001',",
				"     folderPath: 'Gold/UofU/IS6480/Instructor/RentalDB/FilmDim') ~> sourceFilm",
				"source(output(",
				"          ActorID as short,",
				"          FilmID as short,",
				"          LastUpdate as string,",
				"          ActorKey as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'fsuofuis6480dldw001',",
				"     folderPath: 'Gold/UofU/IS6480/Instructor/RentalDB/DIimFilmActor') ~> sourceFilmActor",
				"sourceActor, sourceFilmActor join(sourceActor@ActorKey == sourceFilmActor@ActorKey,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     partitionBy('hash', 1),",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          ActorID = sourceActor@ActorID,",
				"          FirstName,",
				"          LastName,",
				"          ActorKey = sourceActor@ActorKey,",
				"          ActorID = sourceFilmActor@ActorID,",
				"          FilmID,",
				"          ActorKey = sourceFilmActor@ActorKey",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, sourceFilm lookup(select1@FilmID == FilmKey,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: true,",
				"     updateable: false,",
				"     upsertable: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}